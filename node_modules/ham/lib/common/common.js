var fs = require('fs');
var path = require('path');
var util = require('util');
var crypto = require('crypto');
var net = require('net');

/**
 * Promise，后续Node.js会默认支持Promise，所以这里加个判断
 * @type {[type]}
 */
if (!global.Promise) {
    global.Promise = require('es6-promise').Promise;
}
//Object上toString方法
var toString = Object.prototype.toString;

/**
 * 是否是boolean
 * @param  {[type]}  obj
 * @return {Boolean}
 */
global.isBoolean = function (obj) {
    'use strict';
    return toString.call(obj) === '[object Boolean]';
};
/**
 * 是否是数字
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isNumber = function (obj) {
    'use strict';
    return toString.call(obj) === '[object Number]';
};
/**
 * 是否是个对象
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isObject = function (obj) {
    'use strict';
    if (isBuffer(obj)) {
        return false;
    }
    return toString.call(obj) === '[object Object]';
};
/**
 * 是否是字符串
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isString = function (obj) {
    'use strict';
    return toString.call(obj) === '[object String]';
};
/**
 * 是否是个function
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isFunction = function (obj) {
    'use strict';
    return typeof obj === 'function';
};
/**
 * 是否是日期
 * @return {Boolean} [description]
 */
global.isDate = function (obj) {
    'use strict';
    return util.isDate(obj);
};
/**
 * 是否是正则
 * @param  {[type]}  reg [description]
 * @return {Boolean}     [description]
 */
global.isRegexp = function (obj) {
    'use strict';
    return util.isRegExp(obj);
};
/**
 * 是否是个错误
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isError = function (obj) {
    'use strict';
    return util.isError(obj);
};
/**
 * 判断对象是否为空
 * @param  {[type]}  obj
 * @return {Boolean}
 */
global.isEmpty = function (obj) {
    'use strict';
    if (isObject(obj)) {
        var key;
        for (key in obj) {
            return false;
        }
        return true;
    } else if (isArray(obj)) {
        return obj.length === 0;
    } else if (isString(obj)) {
        return obj.length === 0;
    } else if (isNumber(obj)) {
        return obj === 0;
    } else if (obj === null || obj === undefined) {
        return true;
    } else if (isBoolean(obj)) {
        return !obj;
    }
    return false;
};
/**
 * 是否是个标量
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isScalar = function (obj) {
    'use strict';
    return isBoolean(obj) || isNumber(obj) || isString(obj);
};
/**
 * 是否是个数组
 * @type {Boolean}
 */
global.isArray = Array.isArray;
/**
 * 是否是IP
 * @type {Boolean}
 */
global.isIP = net.isIP;
global.isIP4 = net.isIP4;
global.isIP6 = net.isIP6;
/**
 * 是否是个文件
 * @param  {[type]}  p [description]
 * @return {Boolean}   [description]
 */
global.isFile = function (p) {
    'use strict';
    if (!fs.existsSync(p)) {
        return false;
    }
    var stats = fs.statSync(p);
    return stats.isFile();
};
/**
 * 是否是个目录
 * @param  {[type]}  p [description]
 * @return {Boolean}   [description]
 */
global.isDir = function (p) {
    'use strict';
    if (!fs.existsSync(p)) {
        return false;
    }
    var stats = fs.statSync(p);
    return stats.isDirectory();
};
/**
 * 是否是buffer
 * @type {Boolean}
 */
global.isBuffer = Buffer.isBuffer;
/**
 * 是否是个数字的字符串
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
var numberReg = /^((\-?\d*\.?\d*(?:e[+-]?\d*(?:\d?\.?|\.?\d?)\d*)?)|(0[0-7]+)|(0x[0-9a-f]+))$/i;
global.isNumberString = function (obj) {
    'use strict';
    return numberReg.test(obj);
};
/**
 * 判断是否是个promise
 * @param  {[type]}  obj [description]
 * @return {Boolean}     [description]
 */
global.isPromise = function (obj) {
    'use strict';
    return !!(obj && typeof obj.then === 'function');
};

/**
 * 判断一个文件或者目录是否可写
 * @param  {[type]}  p [description]
 * @return {Boolean}      [description]
 */
global.isWritable = function (p) {
    'use strict';
    if (!fs.existsSync(p)) {
        return false;
    }
    var stats = fs.statSync(p);
    var mode = stats.mode;
    var uid = process.getuid ? process.getuid() : 0;
    var gid = process.getgid ? process.getgid() : 0;
    var owner = uid === stats.uid;
    var group = gid === stats.gid;
    return !!(owner && (mode & parseInt('00200', 8)) ||
        group && (mode & parseInt('00020', 8)) ||
        (mode & parseInt('00002', 8)));
};

/**
 * 递归创建目录，同步模式
 * @param  {[type]} p    [description]
 * @param  {[type]} mode [description]
 * @return {[type]}      [description]
 */
global.mkdir = function (p, mode) {
    'use strict';
    mode = mode || '0777';
    if (fs.existsSync(p)) {
        chmod(p, mode);
        return true;
    }
    var pp = path.dirname(p);
    if (fs.existsSync(pp)) {
        fs.mkdirSync(p, mode);
    } else {
        mkdir(pp, mode);
        mkdir(p, mode);
    }
    return true;
};
/**
 * 递归的删除目录，返回promise
 * @param  string p       要删除的目录
 * @param  boolean reserve 是否保留当前目录，只删除子目录
 * @return Promise
 */
global.rmdir = function (p, reserve) {
    'use strict';
    if (!isDir(p)) {
        return getPromise();
    }
    var deferred = getDefer();
    fs.readdir(p, function (err, files) {
        if (err) {
            return deferred.reject(err);
        }
        var promises = files.map(function (item) {
            var filepath = path.normalize(p + '/' + item);
            if (isDir(filepath)) {
                return rmdir(filepath, false);
            } else {
                var deferred = getDefer();
                fs.unlink(filepath, function (err) {
                    return err ? deferred.reject(err) : deferred.resolve();
                })
                return deferred.promise;
            }
        })
        var promise = files.length === 0 ? getPromise() : Promise.all(promises);
        return promise.then(function () {
            if (!reserve) {
                var deferred = getDefer();
                fs.rmdir(p, function (err) {
                    return err ? deferred.reject(err) : deferred.resolve();
                })
                return deferred.promise;
            }
        }).then(function () {
            deferred.resolve();
        }).catch(function (err) {
            deferred.reject(err);
        })
    })
    return deferred.promise;
}
/**
 * 修改目录或者文件权限
 * @param  {[type]} p    [description]
 * @param  {[type]} mode [description]
 * @return {[type]}      [description]
 */
global.chmod = function (p, mode) {
    'use strict';
    mode = mode || '0777';
    if (!fs.existsSync(p)) {
        return true;
    }
    return fs.chmodSync(p, mode);
};
/**
 * 获取文件内容
 * @param  {[type]} file [description]
 * @return {[type]}      [description]
 */
global.getFileContent = function (file, encoding) {
    'use strict';
    if (!fs.existsSync(file)) {
        return '';
    }
    return fs.readFileSync(file, encoding || 'utf8');
};
/**
 * 设置文件内容
 * @param  {[type]} file [description]
 * @param  {[type]} data [description]
 * @return {[type]}      [description]
 */
global.setFileContent = function (file, data) {
    'use strict';
    var filepath = path.dirname(file);
    mkdir(filepath);
    return fs.writeFileSync(file, data);
};

global.appendFileContent = function (file, data) {
    'use strict';
    var filepath = path.dirname(file);
    mkdir(filepath);
    return fs.appendFileSync(file, data);
};
/**
 * 大写首字符
 * @param  {[type]} name [description]
 * @return {[type]}      [description]
 */
global.ucfirst = function (name) {
    'use strict';
    name = (name || '') + '';
    return name.substr(0, 1).toUpperCase() + name.substr(1).toLowerCase();
};
/**
 * 获取字符串的md5
 * @param  {[type]} str [description]
 * @return {[type]}     [description]
 */
global.md5 = function (str) {
    'use strict';
    var instance = crypto.createHash('md5');
    instance.update(str + '');
    return instance.digest('hex');
};
/**
 * 获取随机整数
 * @return {[type]} [description]
 */
global.rand = function (min, max) {
    'use strict';
    return Math.floor(min + Math.random() * (max - min + 1));
}
/**
 * 生成一个promise,如果传入的参数是promise则直接返回
 * @param  {[type]} obj [description]
 * @return {[type]}     [description]
 */
global.getPromise = function (obj, reject) {
    'use strict';
    if (isPromise(obj)) {
        return obj;
    }
    if (reject) {
        return Promise.reject(obj);
    }
    return Promise.resolve(obj);
};
/**
 * 生成一个defer对象
 * @return {[type]} [description]
 */
global.getDefer = function () {
    'use strict';
    var deferred = {};
    deferred.promise = new Promise(function (resolve, reject) {
        deferred.resolve = resolve;
        deferred.reject = reject;
    });
    return deferred;
};
/**
 * 快速生成一个object
 * @param  {[type]} key   [description]
 * @param  {[type]} value [description]
 * @return {[type]}       [description]
 */
global.getObject = function (key, value) {
    'use strict';
    var obj = {};
    if (!isArray(key)) {
        obj[key] = value;
        return obj;
    }
    key.forEach(function (item, i) {
        obj[item] = value[i];
    });
    return obj;
};
/**
 * 将数组变成对象
 * @param  {[type]} arr       [description]
 * @param  {[type]} key       [description]
 * @param  {[type]} valueKeys [description]
 * @return {[type]}           [description]
 */
global.arrToObj = function (arr, key, valueKey) {
    'use strict';
    var result = {};
    var arrResult = [];
    arr.forEach(function (item) {
        var keyValue = item[key];
        if (valueKey === null) {
            arrResult.push(keyValue);
        } else if (valueKey) {
            result[keyValue] = item[valueKey];
        } else {
            result[keyValue] = item;
        }
    })
    return valueKey === null ? arrResult : result;
}


/**
 * 获取保存的文件路径，保存路径和文件名的对象
 * @param {String} tmp_path 缓存中的文件路径
 */
global.getSaveObject = function (tmp_path) {
    var date = new Date();
    var year = date.getFullYear();
    var month = date.getMonth();
    month += 1;
    month = month < 10 ? ("0" + month) : month;
    var day = date.getDate();
    day = day < 10 ? ("0" + day) : day;
    var path = APP_PATH + '/static/upload/' + year + "/" + month + "/" + day + "/";
    if (!isDir(path)) {
        mkdir(path);
    }
    var tmpArr = tmp_path.split('\\');
    var fileName = tmpArr[tmpArr.length - 1];
    var saveUrl = path + fileName;
    var url = "/upload/" + year + "/" + month + "/" + day + "/" + fileName;
    return {
        "path": "/upload/" + year + "/" + month + "/" + day + "/",
        "saveUrl": saveUrl,
        "url": url,
        "fileName": fileName
    };
}

/**
 * 摘要提取
 * @param $str
 * @param $start
 * @param $width
 * @param $trimmarker
 * @return string
 */
function strimwidth(str, start, width, trimmarker) {
    var output = str.substr(start, width);
    return output + trimmarker;
}

function removeHTMLTag(str) {
    str = str.replace(/<\/?[^>]*>/g, ''); //去除HTML tag
    str = str.replace(/[ | ]*\n/g, '\n'); //去除行尾空白
    //str = str.replace(/\n[\s| | ]*\r/g,'\n'); //去除多余空行
    str = str.replace(/&nbsp;/ig, ''); //去掉&nbsp;
    return str;
}
/**
 * 获取一片文章的摘要
 * @param $post
 * @return string
 */
global.get_summary = function (str, len) {
    return strimwidth(removeHTMLTag(str), 0, len, '');
}

/**
 * 格式化日期
 * @param  {[type]} date    [description]
 * @param  {[type]} pattern [description]
 * @return {[type]}         [description]
 */
Date.format = function (date, pattern) {
    if (!date) {
        date = new Date;
    } else {
        if (!isDate(date)) {
            date = new Date(date);
        }
    }
    pattern = pattern || 'yyyy-MM-dd';
    var y = date.getFullYear().toString();
    var o = {
        M: date.getMonth() + 1, //month
        d: date.getDate(), //day
        h: date.getHours(), //hour
        m: date.getMinutes(), //minute
        s: date.getSeconds() //second
    };
    pattern = pattern.replace(/(y+)/ig, function (a, b) {
        return y.substr(4 - Math.min(4, b.length));
    });
    for (var i in o) {
        pattern = pattern.replace(new RegExp('(' + i + '+)', 'g'), function (a, b) {
            return (o[i] < 10 && b.length > 1) ? '0' + o[i] : o[i];
        });
    }
    return pattern;
}

//获取当前时间戳
global.getNow = function () {
    return parseInt(Date.now() / 1000);
}

/**
 * 获取日期
 * @param  {[type]} date [description]
 * @return {[type]}      [description]
 */
global.getDate = function (date) {
    //return php.date("Y/m/d",date);
    return Date.format(date * 1000, "yyyy-MM-dd");
}

/**
 * 获取日期和时间
 * @param  {[type]} date [description]
 * @return {[type]}      [description]
 */
global.getDateTime = function (date) {
    //return php.date("Y-m-d h:m:s",date);
    return Date.format(date * 1000, "yyyy-MM-dd hh:mm:ss");
}