var dblite = require('dblite').withSQLite("3.8.6 +");
var config = require(APP_PATH + "/ham/conf/config.js");
var db = dblite(config.sqlite_path || HAM_PATH + "/ham.sqlite", '-header');
var utils = require('./utils');
var Query = require('sql-query');
var model = require('./Model');

module.exports = model.extend({
    dialect: "sqlite",
    queryParams: function (str) {
        var sql = "";
        var q = new(Query.Query)(this.dialect);
        switch (str) {
        case "add":
            sql = q.insert().into(this.tableName).set(this.addTemp).build();
            break;
        case "update":
            sql = q.update().into(this.tableName).where(this.whereTemp).set(this.updateTemp).build();
            break;
        case "find":
            this.limitNum=1;
        case "select":
            var findQ = q.select().from(this.tableName);
            if(this.joinTemp){
                findQ=findQ.from(this.joinTemp.t2Name,this.joinTemp.t2Item,this.tableName,this.joinTemp.tItem);
            }
            findQ=findQ.select(this.fieldTemp).where(this.whereTemp);
            if(this.pageTemp.page){
                findQ=findQ.limit(""+(this.pageTemp.page-1)*this.pageTemp.size+","+this.pageTemp.size)
            }else if(this.limitNum>0){
                findQ=findQ.limit(this.limitNum);
            }
            if (this.orderTemp) {
                if (isString(this.orderTemp)) {
                    findQ = findQ.order(this.orderTemp);
                } else {
                    findQ = findQ.order(this.orderTemp[0], this.orderTemp[1] || "A");
                }
            }
            sql = findQ.build();
            break;
        case "delete":
            var deleteQ = q.remove().from(this.tableName).where(this.whereTemp);
            sql = deleteQ.build();
            break;
        case "count":
            var countQ=q.select().from(this.tableName).count(this.countTemp).where(this.whereTemp);
             sql = countQ.build();
            break;
        default:
            break;
        }
        return this.query(sql);
    },
    addAll: function (objs) {
        var key;
        var keyArr=[];
        var valueArr=[];
        var sql="BEGIN;";
        var q = new(Query.Query)(this.dialect);
        console.log(objs);
        for(var i=0;i<objs.length;i++){
            sql += q.insert().into(this.tableName).set(objs[i]).build()+";";
        }
        sql+="COMMIT;"
        return this.query(sql);
    },
    /**
     * [[通过sql字符串查询]]
     */
    query: function (sql) {
        var deferred = getDefer();
        var self=this;
        if(self.cacheFleg&&self.cacheFunc.has(sql)){
            deferred.resolve(self.cacheFunc.get(sql));
        }else{
            $A.debug("orange", sql);
            if(APP_DEBUG){
                appendFileContent(APP_PATH + "/last.sql", sql + "\n");
            }
            db.query(sql, function (err, rows) {
                if (err) {
                    $A.debug("red", JSON.stringify(err));
                    deferred.reject(err);
                } else {
                    if(self.cacheFleg){
                        self.cacheFunc.set(sql,rows);
                    }
                    deferred.resolve(rows);
                }
            });
        }
        return deferred.promise;
    },
});

