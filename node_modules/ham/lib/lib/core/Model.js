var Class = require("./../../Class");
var dblite = require('dblite').withSQLite("3.8.6 +");
var config=require(APP_PATH+"/ham/conf/config.js");
var db =dblite(config.sqlite_path||HAM_PATH+"/ham.sqlite",'-header');
var utils=require('./utils');
//var LRU = require("lru-cache");
var LRU=require("./../utils/lrucache").lrucache;
var CACHE_TIME=Ham.config.sql_cache_time||1000*60*5;
var cache = LRU.create(500);
/**
 * 简单的数据模型
 * https://www.digitalocean.com/?refcode=a51bf433f131
 */
module.exports = Class.extend({
    whereTemp: {},
    addTemp: {},
    addAllTemp: [],
    fieldTemp: [],
    updateTemp: {},
    tableName: '',
    orderTemp: null,
    whereTemp: null,
    limitNum: -1,
    db_prefix:'',
    joinTemp:null,
    pageTemp:{},
    countTemp:"",
    cacheFleg:false,
    cacheFunc:cache,
    initClass: function (dbName) {
        if (dbName) {
            //db.query('use ' + dbName);
            this.db_prefix=config.db_prefix||'';
        } else {
            this.whereTemp = {};
            this.addTemp = {};
            this.addAllTemp = [];
            this.fieldTemp = [];
            this.updateTemp = {};
            this.orderTemp = null;
            this.whereTemp = null;
            this.joinTemp=null;
            this.limitNum = -1;
            this.pageTemp={};
            this.cacheFleg=false;
            this.countTemp='';
        }
    },
    /**
     * [[查找]]
     */
    find: function () {
        return this.queryParams("find");
    },
    select:function(){
        return this.queryParams("select");
    },
    table: function (tableName) {
        this.tableName = this.db_prefix+tableName;
        this.initClass();
        return this;
    },
    cache:function(){
        this.cacheFleg=true;
        return this;
    },
    /**
     * [[where]]
     */
    where: function (obj) {
        if(isObject(obj)){
            this.whereTemp = obj;
        }else if(arguments.length==2&&isString(obj)){
            this.whereTemp=this.whereTemp||{};
            this.whereTemp[obj]=arguments[1];
        }
        return this;
    },
    order: function (obj) {
        this.orderTemp = obj;
        return this;
    },
    limit: function (limitNum) {
        this.limitNum = limitNum;
        return this;
    },
    page:function(page,size){
        page=page||1;
        size=size||6
        this.pageTemp.page=page;
        this.pageTemp.size=size;
        return this;
    },
    count:function(id){
        var deferred = getDefer();
        this.countTemp=id||null;
        this.queryParams("count").then(function(data){
            if(data.length>0){
                data=data[0];
                for(var k in data){
                    deferred.resolve(data[k]);
                    break;
                }
            }else{
                deferred.resolve(0);
            }
        });
        return deferred.promise;
    },
    /**
     * [[通过sql字符串查询]]
     */
    query: function (sql) {
        var deferred = getDefer();
        var self=this;
        if(self.cacheFleg&&cache.has(sql)){
            deferred.resolve(cache.get(sql));
        }else{
            $A.debug("orange", sql);
            if(APP_DEBUG){
                appendFileContent(APP_PATH + "/last.sql", sql + "\n");
            }
            db.query(sql, function (err, rows) {
                if (err) {
                    $A.debug("red", JSON.stringify(err));
                    deferred.reject(err);
                } else {
                    if(self.cacheFleg){
                        cache.set(sql,rows,CACHE_TIME);
                    }
                    deferred.resolve(rows);
                }
            });
        }
        return deferred.promise;
    },
    field: function (arr) {
        this.fieldTemp = this.fieldTemp.concat(arr);
        return this;
    },
    join:function(t2Name,t2Item,tItem){
        this.joinTemp={
            t2Name:this.db_prefix+t2Name,
            t2Item:t2Item,
            tItem:tItem
        }
        return this;
    },
    /**
     * [[添加]]
     */
    add: function (obj) {
        utils.merge(this.addTemp, obj, true);
        return this.queryParams("add");
    },
    /**
     * [[添加所有]]
     * @param   {[[Array]]} objs [[Description]]
     * @returns {[[Promise]]} [[Description]]
     */
    addAll: function (objs) {
        var key;
        var keyArr=[];
        var valueArr=[];
        var sql="BEGIN;";
        for(var i=0;i<objs.length;i++){
            sql+="INSERT INTO "+this.tableName+"("
             keyArr.length=0;
             valueArr.length=0;
             for (key in objs[i]) {
                keyArr.push(key);
                if(isNumber(objs[i][key])){
                    valueArr.push(objs[i][key]);
                }else{
                    valueArr.push("'"+objs[i][key]+"'");
                }
            }
            sql += keyArr.join() + ") values ("+valueArr.join()+");";
        }
        sql+="COMMIT;"
        return this.query(sql);
    },
    /**
     * [[删除]]
     */
    delete: function () {
        return this.queryParams("delete");
    },
    queryParams: function (str) {
        var sql = "";
        var params = null;
        var fields = [];
        switch (str) {
        case "add":
            var keys = [];
            var paramKeys=[];
            sql += "insert into " + this.tableName + "(";
            for (var key in this.addTemp) {
                keys.push(key);
                paramKeys.push(":"+key);
            }
            sql += keys.join() + ") values ("+paramKeys.join()+")";
            params = this.addTemp;
            break;
        case "update":
            var keys = [];
            var values = [];
            sql += "update " + this.tableName + " set ";
            for (var key in this.updateTemp) {
                sql += key + "=:"+key+",";
            }
            sql = sql.slice(0, sql.length - 1);
            if (this.whereTemp) {
                sql += " where ";
                var pWhereTemp={};
                for (var key in this.whereTemp) {
                    sql += key + "=:where_" + key + " and ";
                    pWhereTemp["where_" + key]=this.whereTemp[key];
                }
                sql = sql.slice(0, sql.length - 5);
                params={};
                utils.merge(params,this.updateTemp);
                utils.merge(params,pWhereTemp);
            }
            break;
        case "find":
            if (this.fieldTemp.length > 0) {
                sql += "select " + this.fieldTemp.join() + " from " + this.tableName;
            } else {
                sql += "select * from " + this.tableName;
            }
            if (this.whereTemp) {
                sql += " where ";
                for (var key in this.whereTemp) {
                   sql += key + "=:" + key + " and ";
                }
                sql = sql.slice(0, sql.length - 4);
            }
            params=this.whereTemp||{};
            if(this.limitNum>0){
                sql += " limit :limitNum;";
                utils.merge(params,{limitNum:this.limitNum});
            }
            break;
        case "delete":
            sql += "delete from " + this.tableName;
            if (this.whereTemp) {
                sql += " where ";
                for (var key in this.whereTemp) {
                        sql += key + "=:" +key + " and ";
                }
                sql = sql.slice(0, sql.length - 5);
            }
            params=this.whereTemp;
            break;
        default:
            break;
        }
        $A.debug("orange", sql+"|"+JSON.stringify(params));
        if(APP_DEBUG){
            appendFileContent(APP_PATH + "/last.sql", sql+"|"+JSON.stringify(params)+ "\n");
        }
        var deferred = getDefer();
        db.query(sql, params, function (err, rows) {
            if (err) {
                $A.debug("red", JSON.stringify(err));
                deferred.reject(err);
            } else {
                deferred.resolve(rows);
            }
        });
        return deferred.promise;
    },
    /**
     * [[更新]]
     */
    update: function (obj) {
        utils.merge(this.updateTemp, obj, true);
        return this.queryParams("update");
    },
});