 var http = require("http");
 var querystring = require("querystring")
 var url = require("url");
 var post = require("./Post");
 module.exports = function (port) {
     this.init();
     var self = this;
     var hamModuleTemp = {};
     http.createServer(function (req, res) {
         req.startDate = Date.now();
         if (self.checkStaticResource(req, res) == true) {
             return;
         }
         req.url = req.url.split(".html").join("/");
         var urlPares = url.parse(req.url);
         var query = querystring.parse(urlPares.query);
         var pathname = urlPares.pathname;
         var paths = pathname.split('/');
         var controller = paths[1] || "index";
         var action = paths[2] || "index";
         var args = paths.slice(3);
         req.controller = controller;
         res.query = query;
         req.action = action;
         for (var i = 0; i < args.length; i++) {
             args[i] = decodeURI(args[i]);
         }
         var hamModule, method;
         $A.debug('blue', controller, action, req.url);
         if (!hamModuleTemp[controller]) {
             try {
                 hamModule = require(APP_PATH + '/ham/controller/' + controller).create(req, res);
                 hamModuleTemp[controller] = hamModule;
             } catch (err) {
                 console.log(err.stack);
                 $A.debug('red', err);
                 self._404Action(req, res, controller);
                 return;
             }
         } else {
             hamModule = hamModuleTemp[controller];
         }
         
        method = hamModule[action + "Action"];
         if (method) {
             hamModule.sessionInit.call(hamModule, req, res);
             var pInit = hamModule.init.call(hamModule, req, res);
             if (req.isRedirect==true) {
                 return;
             }
             var errAction = function (err) {
                 $A.debug('red', err);
                 Ham._500Action(req, res);
             };
             var doAction = function () {
                 try {
                     method.apply(hamModule, args);
                 } catch (err) {
                     errAction(err);
                 }
             };
             if (isPromise(pInit)) {
                 pInit.then(function () {
                     return post.run(req, res);
                 }).then(doAction, errAction);
             }else{
                post.run(req, res).then(doAction, errAction);
             }
         } else {
             self._404Action(req, res, controller, action);
             return;
         }
     }).listen(process.env.PORT || port);
     $A.debug('green', '服务已经启动,端口是' + (process.env.PORT || port));
 };