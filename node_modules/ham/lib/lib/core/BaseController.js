var Class = require("./../../Class");
var utils = require('./utils');
var ejs = require('ejs');
var session = require('./Session');
var template = require('art-template');
//template.config("base",APP_PATH + '/ham/view/');
//template.config("openTag","<%");
//template.config("closeTag","%>");
template.config("compress",true);
//控制器基类
module.exports = Class.extend({
    req: null,
    res: null,
    session: {},
    cookies: {},
    tplData: {HamBlocks:{}},
    isGet: true,
    isPost: false,
    isRedirect:false,
    initClass:function(req,res){
    },
    sessionInit:function(req,res){
        session(req, res);
        this.session = req.session;
        this.cookies = req.cookies;
        this.req = req;
        this.res = res;
        this.isGet = this.req.method.toLowerCase() == "get";
        this.isPost = this.req.method.toLowerCase() == "post";
    },
    /**
     * [[初始化]]
     * @param {[[Type]]} req [[Description]]
     * @param {[[Type]]} res [[Description]]
     */
    init:function (req, res) {
        
    },
    sqlValidPost: function (key) {
        if (!this.req.postFields[key]) {
            return null;
        }
        return this.req.postFields[key].replace(/select|update|delete|exec|count|create|’|"|=|;|>|<|%/ig, "");
    },
    sqlValidGet: function (key) {
        if (!this.req.query[key]) {
            return null;
        }
        return this.req.query[key].replace(/select|update|delete|truncate|join|union|exec|insert|drop|count|’|"|;|>|<|%/ig, "");
    },
    sqlValidString:function(str){
        return String(str).replace(/select|update|delete|truncate|join|union|exec|insert|drop|count|’|"|;|>|<|%/ig, "");
    },
    files:function(key){
        if(key==undefined){
            return this.req.postFiles;
        }
        return this.req.postFiles[key];
    },
    post: function (key) {
        if(key){
            return this.req.postFields[key];
        }else{
            return this.req.postFields;
        }
    },
    get: function (key) {
        if(key){
            return this.req.query[key];
        }else{
            return this.req.query;
        }
    },
    /**
     * url跳转
     * @param  {[type]} url  [description]
     * @param  {[type]} code [description]
     * @return {[type]} [description]
     */
    redirect: function (url, code) {
        this.res.writeHead(code || 302, {
            "Location": url || '/'
        });
        this.res.end();
        this.req.isRedirect=true;
    },
    /**
     * [[直接输出字符串]]
     * @param {[Type]} data [要输出的字符串]
     */
    echo: function (data) {
        this.res.writeHead(200, {
            "Content-Type": "text/plain; charset=utf-8;",
            "useTime": Date.now() - this.req.startDate
        });
        if (!isString(data)) {
            data = JSON.stringify(data);
        }
        this.res.end(data);
    },
    /**
     * [[设置模版数据]]
     */
    assign: function () {
        //var arr=[].
        if (arguments.length == 1) {
            utils.merge(this.tplData, arguments[0],true);
        } else {
            this.tplData[arguments[0]]=arguments[1];
        }
    },
    /**
     * [[输出]]
     */
    display2: function (tplPath) {
        var templateFile;
        if(tplPath){
            if(tplPath.indexOf("/")!=-1){
                var arr=tplPath.split("/");
                arr=arr.length>=3?arr.slice(1,3):arr;
                templateFile = APP_PATH + '/ham/view/' +arr[0] + "_" + arr[1] + ".ejs";
            }else{
                templateFile=APP_PATH + '/ham/view/' +tplPath+ ".ejs";
            }
        }else{
            templateFile = APP_PATH + '/ham/view/' + this.req.controller + "_" + this.req.action + ".ejs";
        }
        //$A.debug(templateFile);
        var content = getFileContent(templateFile);
        var conf = {
            filename: templateFile,
            cache: true
        };
        var html = ejs.compile(content, conf)(this.tplData);
        this.res.writeHead(200, {
            "Content-Type": "text/html; charset=utf-8;",
            "useTime": Date.now() - this.req.startDate+"ms"
        });
        this.res.end(html);
    },
    /**
     * [[art-template输出]]
     */
    display: function (tplPath) {
        tplPath=tplPath||this.req.controller + "/" + this.req.action
        var html = template(APP_PATH + '/ham/view/'+tplPath, this.tplData);
        this.res.writeHead(200, {
            "Content-Type": "text/html; charset=utf-8;",
            "useTime": Date.now() - this.req.startDate+"ms"
        });
        this.res.end(html);
    }
});